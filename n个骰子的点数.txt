#include<stdio.h>
#include<malloc.h>
/***n个骰子的点数***/
int sum = 0;//点数和
int allpro = 0;//所有情况
/*
* 递归得到所有排列
*/
void getSum(int* bucket, int current, int n)
{
	if(current >= n)
	{
	   allpro++;
       bucket[sum]++;
	   return ;
	}
	for(int i=1;i<=6;i++)
	{
		sum = sum + i;
        getSum(bucket, current+1, n);
		sum = sum - i;
	}
}
/*
* 得到骰子点数对应的概率(递归求解)
*/
void getSumShowProbability(int n)
{
	int* bucket = new int[6*n+1];//桶
	for(int i=0;i<6*n+1;i++)
	{
        bucket[i] = 0;
	}
	getSum(bucket, 0, n);
	
	for(i=n;i<=6*n;i++)
	{
		if(bucket[i] > 0)
		{
		    double pro = (bucket[i]*1.0) / allpro;
		    printf("点数: %d, 概率: %.6f\n", i, pro);
		}
	}
	delete [] bucket;
}
/*
* 得到骰子点数对应的概率(循环求解)
*/
void getSumShowProbability2(int n)
{
	int* bucket[2];
	bucket[0] = new int[6*n+1];
    bucket[1] = new int[6*n+1];
	for(int i=0;i<6*n+1;i++)
	{
	   if(i>=1 && i<=6)
	   {
          bucket[0][i] = 1;
	   }else{
          bucket[0][i] = 0;
	   }
	   bucket[1][i] = 0;
	}
    /*****运用骰子的规律*****/
    for(i=2;i<=n;i++)
	{
        /***针对每一层处理***/
		for(int j=i;j<=6*i;j++)
		{
		   int before = j-1;
		   int times = 0;
		   bucket[(i-1)%2][j] = 0;
           while(before >= i-1 && times < 6)
		   {
			  if(before <= 6*(i-1))
			  {
                 bucket[(i-1)%2][j] += bucket[i%2][before];
			  }
			  before--;
			  times++;
		   }
		}
	}
	int allpro = 1;
	for(i=0;i<n;i++)
	{
      allpro *= 6;
	}
	/********得出结果*********/
	for(i=n;i<=6*n;i++)
	{
	    double pro = (bucket[(n-1)%2][i]*1.0) / allpro;
		printf("点数: %d, 概率: %.6f\n", i, pro);
	}
	delete [] bucket[0];
	delete [] bucket[1];
}
int main()
{
    int n = 8;
    getSumShowProbability(n);
} 