#include<stdio.h>
#include<malloc.h>
/***合并两个排序的链表***/
typedef struct LNode{
  int data;
  struct LNode *next;
}LNode, *LinkList;

LinkList Head1;//第一个链表
LinkList Head2;//第二个链表
LinkList Head3;//合并后的链表
/*
* 初始化链表
*/
void initLinkList()
{
   Head1 = (LinkList)malloc(sizeof(LNode));
   Head1->next = NULL;
   Head2 = (LinkList)malloc(sizeof(LNode));
   Head2->next = NULL;
   Head3 = (LinkList)malloc(sizeof(LNode));
   Head3->next = NULL;
   /*****给链表赋值*****/
   for(int i=8;i>=1;i--)
   {
	   LinkList p = (LinkList)malloc(sizeof(LNode));
	   p->data = i;
	   p->next = NULL;
	   if(i%2 == 0)//偶数
	   {
		   p->next = Head2->next;
	       Head2->next = p;
	   }else{//奇数
		   p->next = Head1->next;
	       Head1->next = p;
	   }
   }
}
/*
* 打印链表
*/
void printLinkList(LinkList Head)
{
    LinkList p = Head->next;
	while(p)
	{
       printf("%d ", p->data);
	   p = p->next;
	}
	printf("\n");
}
/*
* 合并链表
*/
LinkList combineLinkList(LinkList Head1, LinkList Head2, LinkList Head3)
{ 
	if(Head1 == NULL || Head1->next == NULL)//第一个链表为空或不存在
	{
		/******第二个链表存在*******/
		if(Head2 != NULL && Head2->next != NULL)
		{

            return Head2;
		}else{
            printf("两个链表均为空或不存在!\n");
		}
	}else{
        /*******第二个链表为空或者不存在*********/
		if(Head2 == NULL || Head2->next == NULL)
		{
              return Head1;
		}else{
           /*****两个链表都存在，开始进行合并链表****/
            if(Head3 == NULL)
			{
                Head3 = (LinkList)malloc(sizeof(LNode));
				Head3->next = NULL;
			}
		    LinkList p1;//第一个链表的指针
	        LinkList p2;//第二个链表的指针
			LinkList p3;//第三个链表的指针
			p1 = Head1->next;
			p2 = Head2->next;
			p3 = Head3;
			/*******两个链表遍历都没有结束*********/
			while(p1 != NULL && p2 != NULL)
			{
				 /**第一个链表的值小于第二个链表结点的值**/
                 if(p1->data <= p2->data)
				 {
                    p3->next = p1;
					p1 = p1->next;
				 }else{
                    p3->next = p2;
					p2 = p2->next;
				 }
				 p3 = p3->next;
			}
			/******如果第一个链表先结束的****/
			if(p1 == NULL)
			{
               p3->next = p2;//直接把第二个链表剩余部分挂载到新链表
			}else if(p2 == NULL)
			{
               p3->next = p1;//直接把第一个链表剩余部分挂载到新链表
			}
			Head1->next = NULL;
			Head2->next = NULL;
 			return Head3;
		}
	}
}
/*
* 递归实现合并链表
*/
LinkList combineLinkList2(LinkList Head1, LinkList Head2)
{
    if(Head1 == NULL)
	{
       return Head2;
	}
	if(Head2 == NULL)
	{
       return Head1;
	}
	LinkList Head3 = NULL;
	if(Head1->data <= Head2->data)
	{
        Head3 = Head1;
		Head3->next = combineLinkList2(Head1->next, Head2);
	}else{
        Head3 = Head2;
		Head3->next = combineLinkList2(Head1, Head2->next);
	}
	return Head3;
}
int main()
{
   initLinkList();
   printf("第一个链表: ");
   printLinkList(Head1);
   printf("第二个链表: ");
   printLinkList(Head2);
   /******合并链表********/
 //  Head3 = combineLinkList(Head1, Head2, Head3);
   /*******递归合并链表********/
   if(Head3 == NULL)
   {
       Head3 = (LinkList)malloc(sizeof(LNode));
	   Head3->next = NULL;
   }
   if(Head1 != NULL && Head2 != NULL)
   {
       Head3->next = combineLinkList2(Head1->next, Head2->next);
   }else{
       if(Head1 == NULL)
	   {
		   if(Head2 == NULL)
		   {
              printf("两个链表都为空!\n");
			  return ;
		   }else{
              Head3 = Head2;
		   }
	   }else{
           Head3 = Head1;
	   }
   }
   printf("合并后的链表: ");
   printLinkList(Head3);
}